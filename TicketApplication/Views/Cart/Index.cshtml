@model List<Cart>

<div class="container mt-5 mh-100">
    <h2>Giỏ hàng của bạn</h2>
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }
    <form method="post" action="/Order/Checkout" onsubmit="return checkAgreement()">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Sản phẩm</th>
                    <th>Zone</th>
                    <th>Giá</th>
                    <th>Số lượng</th>
                    <th>Tạm tính</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Count > 0)
                {
                    @foreach (var item in Model)
                    {
                        <tr id="item-row-@item.Zone.Id">
                            <td>
                                @if (!string.IsNullOrEmpty(@item.Zone.Event.Image))
                                {
                                    <img src="@Url.Content("~/Images/" + @item.Zone.Event.Image)" alt="Product Image" style="width: 50px; height: 50px;" />
                                }
                                else
                                {
                                    <span>No Image</span>
                                }
                            </td>
                            <td>@item.Zone.Name</td>
                            <td>@item.Zone.Price.ToString("N0") đ</td>
                            <td>
                                <input type="number"
                                       name="quantities[@item.Zone.Id]"
                                       value="@item.Quantity"
                                       min="1"
                                       class="form-control"
                                       style="width: 70px;"
                                       id="quantity-@item.Zone.Id"
                                       onchange="updateQuantity('@item.Zone.Id')">
                            </td>
                            <td id="item-total-@item.Zone.Id">@item.TotalPrice.ToString("N0") đ</td>
                            <td>
                                <button type="button" class="btn btn-danger" onclick="removeItem('@item.Zone.Id', '@item.Zone.Name')">Xóa</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class="row">

            <div class="col-md-4 offset-md-8">

                <form id="apply-discount-form">
                    <div class="form-group">
                        <label for="discountCode">Nhập mã giảm giá:</label>
                        <input type="text" id="discountCode" name="Code" class="form-control" placeholder="Mã giảm giá (nếu có)">
                    </div>

                    <div class="form-check mt-3">
                        <input type="radio" id="useRankDiscount" name="discountOption" value="rank" class="form-check-input" checked>
                        <label class="form-check-label" for="useRankDiscount">
                            Áp dụng giảm giá theo Rank
                        </label>
                    </div>

                    <div class="form-check">
                        <input type="radio" id="useCodeDiscount" name="discountOption" value="code" class="form-check-input">
                        <label class="form-check-label" for="useCodeDiscount">
                            Áp dụng mã giảm giá
                        </label>
                    </div>

                    <button type="button" class="btn btn-primary mt-3" onclick="applyDiscount()">Kiểm tra</button>
                </form>

                <div class="form-check mt-3" style="background-color: #f9f9f9;">
                    <input class="form-check-input" type="checkbox" id="termsAgreement" required>
                    <label class="form-check-label d-inline-block ml-2" for="termsAgreement" style="max-height: 80px; display: inline-block; padding-right: 10px;">
                        <strong>Đồng ý với các điều khoản:</strong>
                        <ul style="margin: 0; padding-left: 20px;">
                            <li>Khi quý khách hoàn tất quá trình thanh toán vé, giao dịch sẽ được xem là hoàn tất và không thể hủy bỏ hoặc hoàn tiền.</li>
                        </ul>
                    </label>
                </div>


                <h4 class="d-flex justify-content-between mt-3">
                    <span>Tổng:</span>
                    <strong id="grand-total">@Model.Sum(i => i.TotalPrice).ToString("N0") đ</strong>
                </h4>
                <button type="submit" class="btn btn-primary btn-block mt-3">Tiến hành thanh toán</button>
            </div>
        </div>
    </form>
</div>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Xác nhận xóa sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn xóa sản phẩm <span id="itemName"></span>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Xóa</button>
            </div>
        </div>
    </div>
</div>


<script>
    function checkAgreement() {
        const isAgreed = document.getElementById('termsAgreement').checked;
        if (!isAgreed) {
            showNotification('Bạn phải đồng ý với các điều khoản để tiếp tục.', 'danger');
            return false;
        }
        return true;
    }

    function applyDiscount() {
        const discountCode = document.getElementById("discountCode").value.trim();
        const useRank = document.querySelector('input[name="discountOption"]:checked').value === "rank";

        fetch('/Cart/ApplyDiscount', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                Code: useRank ? null : discountCode,
                Rank: useRank ? "rank" : null
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById("grand-total").textContent = data.newTotal + " đ";
                    showNotification(data.message, 'success');
                } else {
                    showNotification(data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Có lỗi xảy ra.', 'danger');
            });
    }

    function removeItem(itemId, itemName) {
        document.getElementById('itemName').innerText = itemName;

        var myModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
        myModal.show();

        document.getElementById('confirmDeleteButton').onclick = function () {
            fetch(`/Cart/RemoveItem?itemId=${itemId}`, {
                method: 'DELETE',
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.querySelector(`#item-row-${itemId}`).remove();
                        var total = document.querySelector('#grand-total');
                        const newGrandTotal = Number(total.textContent.replace(/[^\d]/g, '')) - Number(data.priceRemove);
                        total.textContent = newGrandTotal + ' đ';

                        var quantityItems = document.getElementsByClassName("quantity-items");
                        var totalQuantity = quantityItems[0].textContent - 1;
                        if (totalQuantity > 0) {
                            for (let quan of quantityItems) {
                                quan.textContent = totalQuantity;
                            }
                        } else {
                            for (let quan of quantityItems) {
                                quan.classList.add("d-none");
                            }
                        }
                        showNotification('Xóa sản phẩm thành công!', 'success');
                    } else {
                        showNotification('Xóa sản phẩm không thành công!', 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Có lỗi xảy ra khi xóa sản phẩm.', 'danger');
                });

            myModal.hide();
        };
    }


    function updateQuantity(itemId) {
        const quantity = document.getElementById(`quantity-${itemId}`).value;
        if (quantity > 0) {
            fetch(`/Cart/UpdateQuantity?itemId=${itemId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ Quantity: quantity })
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data.success === true) {
                        const itemTotal = data.updatedTotalPrice;
                        if (itemTotal !== undefined) {
                            document.querySelector(`#item-total-${itemId}`).textContent = itemTotal + ' đ';
                        } else {
                            console.error('updatedTotalPrice is undefined', data);
                        }

                        const newGrandTotal = data.newGrandTotal;
                        if (newGrandTotal !== undefined) {
                            document.querySelector('#grand-total').textContent = newGrandTotal + ' đ';
                        } else {
                            console.error('newGrandTotal is undefined', data);
                        }
                        showNotification('Cập nhật số lượng thành công!', 'success');
                    } else {
                        showNotification('Cập nhật số lượng không thành công!' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Có lỗi xảy ra khi cập nhật số lượng.', 'danger');
                });
        } else {
            showNotification('Số lượng phải lớn hơn 0.', 'danger');
        }
    }
</script>
