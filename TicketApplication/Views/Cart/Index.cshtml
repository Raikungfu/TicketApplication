@model List<Cart>

<div class="container mt-5 mh-100">
    <h2>Giỏ hàng của bạn</h2>
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }
    <form method="post" action="/Order/Checkout">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Sản phẩm</th>
                    <th>Zone</th>
                    <th>Giá</th>
                    <th>Số lượng</th>
                    <th>Tạm tính</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Count > 0)
                {
                    @foreach (var item in Model)
                    {
                        <tr id="item-row-@item.Zone.Id">
                            <td>
                                @if (!string.IsNullOrEmpty(@item.Zone.Event.Image))
                                {
                                    <img src="@Url.Content("~/Images/" + @item.Zone.Event.Image)" alt="Product Image" style="width: 50px; height: 50px;" />
                                }
                                else
                                {
                                    <span>No Image</span>
                                }

                            </td>
                            <td>@item.Zone.Name</td>
                            <td>@item.Zone.Price.ToString("N0") đ</td>
                            <td>
                                <input type="number"
                                       name="quantities[@item.Zone.Id]"
                                       value="@item.Quantity"
                                       min="1"
                                       class="form-control"
                                       style="width: 70px;"
                                       id="quantity-@item.Zone.Id"
                                       onchange="updateQuantity('@item.Zone.Id')">
                            </td>
                            <td id="item-total-@item.Zone.Id">@item.TotalPrice.ToString("N0") đ</td>
                            <td>
                                <button type="button" class="btn btn-danger" onclick="removeItem('@item.Zone.Id')">Xóa</button>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>

        <div class="row">
            <div class="col-md-4 offset-md-8">
                <h4 class="d-flex justify-content-between">
                    <span>Chọn phương thức thanh toán:</span>
                </h4>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="paymentMethodQR" value="QR" required>
                    <label class="form-check-label" for="paymentMethodQR">
                        Thanh toán QR
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="paymentMethodDomestic" value="DomesticCard" required>
                    <label class="form-check-label" for="paymentMethodDomestic">
                        Thẻ nội địa và tài khoản ngân hàng
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="paymentMethodInternational" value="InternationalCard" required>
                    <label class="form-check-label" for="paymentMethodInternational">
                        Thẻ thanh toán quốc tế
                    </label>
                </div>
                <h4 class="d-flex justify-content-between mt-3">
                    <span>Tổng:</span>
                    <strong id="grand-total">@Model.Sum(i => i.TotalPrice).ToString("N0") đ</strong>
                </h4>
                <button type="submit" class="btn btn-primary btn-block mt-3">Tiến hành thanh toán</button>
            </div>
        </div>
    </form>
</div>

<script>
    function removeItem(itemId) {
        if (confirm("Bạn có chắc chắn muốn xóa sản phẩm này không?")) {
            fetch(`/Cart/RemoveItem?itemId=${itemId}`, {
                method: 'DELETE',
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.querySelector(`#item-row-${itemId}`).remove();

                        const newGrandTotal = data.newGrandTotal;
                        document.querySelector('#grand-total').textContent = newGrandTotal.toLocaleString('vi-VN') + ' đ';

                        showNotification('Xóa sản phẩm thành công!', 'success');
                    } else {
                        showNotification('Xóa sản phẩm không thành công!', 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Có lỗi xảy ra khi xóa sản phẩm.', 'danger');
                });
        }
    }

    function updateQuantity(itemId) {
        const quantity = document.getElementById(`quantity-${itemId}`).value;
        if (quantity > 0) {
            fetch(`/Cart/UpdateQuantity?itemId=${itemId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ Quantity: quantity })
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data.success === true) {
                        const itemTotal = data.updatedTotalPrice;
                        if (itemTotal !== undefined) {
                            document.querySelector(`#item-total-${itemId}`).textContent = itemTotal.toLocaleString('vi-VN') + ' đ';
                        } else {
                            console.error('updatedTotalPrice is undefined', data);
                        }

                        const newGrandTotal = data.newGrandTotal;
                        if (newGrandTotal !== undefined) {
                            document.querySelector('#grand-total').textContent = newGrandTotal.toLocaleString('vi-VN') + ' đ';
                        } else {
                            console.error('newGrandTotal is undefined', data);
                        }
                        showNotification('Cập nhật số lượng thành công!', 'success');
                    } else {
                        showNotification('Cập nhật số lượng không thành công!', 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Có lỗi xảy ra khi cập nhật số lượng.', 'danger');
                });
        } else {
            showNotification('Số lượng phải lớn hơn 0.', 'danger');
        }
    }

</script>
