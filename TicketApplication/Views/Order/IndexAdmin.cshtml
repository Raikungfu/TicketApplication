@model IEnumerable<TicketApplication.Models.Order>

@{
    TempData["Title"] = "Admin Orders";
}

<div class="container mt-5">
    <h2 class="mb-4">Orders Management</h2>

    @if (!Model.Any())
    {
        <div class="alert alert-warning" role="alert">
            No orders available.
        </div>
    }
    else
    {
        <table class="table  table-bordered">
            <thead class="table-light">
                <tr>
                    <th>Order ID</th>
                    <th>User ID</th>
                    <th>User Email</th>
                    <th>Status</th>
                    <th>Total Amount</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.UserId</td>
                        <td>@order.User.Email</td>
                        <td>@order.Status</td>
                        <td>@order.TotalAmount đ</td>
                        <td>
                            <!-- Button to trigger the detail modal -->
                            <button class="btn btn-info"
                                    data-bs-toggle="modal"
                                    data-bs-target="#orderDetailModal"
                                    data-order-id="@order.Id"
                                    data-user-email="@order.User.Email"
                                    data-total-amount="@order.TotalAmount đ"
                                    data-order-details="@Html.Raw(string.Join(";",
            order.OrderDetails.SelectMany(d =>
                d.Tickets.Select(t => $"Ticket: {t.Id}, Zone: {t.Zone?.Name}, Quantity: {d.Quantity}"))))">
                                View Details
                            </button>

                            <!-- Button to trigger the edit modal -->
                            <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#orderEditModal"
                                    data-order-id="@order.Id" data-current-status="@order.Status">
                                Edit Status
                            </button>

                            <form asp-action="Delete" asp-route-id="@order.Id" method="post" style="display:inline;" id="deleteForm-@order.Id">
                                <input type="hidden" name="orderId" value="@order.Id" />
                                <button type="button" class="btn btn-sm btn-danger" onclick="openDeleteModal('@order.Id', '@Html.Raw(string.Join(";", order.OrderDetails.SelectMany(d => d.Tickets.Select(t => $"Ticket: {t.Id}, Zone: {t.Zone?.Name}, Quantity: {d.Quantity}"))))')">Delete</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h6>Order ID: <span id="modalOrderId"></span></h6>
                <h6>User Email: <span id="modalUserEmail"></span></h6>
                <h6>Total Amount: <span id="modalTotalAmount"></span></h6>
                <h6>Order Details:</h6>
                <ul id="modalOrderDetails"></ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Order Status Modal -->
<div class="modal fade" id="orderEditModal" tabindex="-1" aria-labelledby="orderEditModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderEditModalLabel">Edit Order Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editOrderForm" method="post" action="@Url.Action("Edit")">
                <div class="modal-body">
                    <input type="hidden" id="editOrderId" name="orderId" />
                    <div class="mb-3">
                        <label for="editOrderStatus" class="form-label">Select New Status:</label>
                        <select class="form-select" id="editOrderStatus" name="newStatus" required>
                            <option value="Pending">Pending</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                            <!-- Add more statuses as necessary -->
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>




<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the order? <br>
                <span id="orderDetail"></span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                document.addEventListener('DOMContentLoaded', function () {
                    showNotification('@Html.Raw(TempData["ErrorMessage"])', 'danger');
                });
            </text>
        }

        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                document.addEventListener('DOMContentLoaded', function () {
                    showNotification('@Html.Raw(TempData["SuccessMessage"])', 'success');
                });
            </text>
        }

        function openDeleteModal(orderId, orderDetail) {
            document.getElementById('orderDetail').textContent = orderDetail;

            var myModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            myModal.show();

            document.getElementById('confirmDeleteButton').onclick = function () {
                document.getElementById('deleteForm-' + orderId).submit();
                myModal.hide();
            };
        }

        // Script to handle modal population for order details
        const orderDetailModal = document.getElementById('orderDetailModal');
        orderDetailModal.addEventListener('show.bs.modal', event => {
            const button = event.relatedTarget; // Button that triggered the modal

            const orderId = button.getAttribute('data-order-id');
            const userEmail = button.getAttribute('data-user-email');
            const totalAmount = button.getAttribute('data-total-amount');
            const orderDetails = button.getAttribute('data-order-details');

            // Update the modal's content.
            document.getElementById('modalOrderId').textContent = orderId;
            document.getElementById('modalUserEmail').textContent = userEmail;
            document.getElementById('modalTotalAmount').textContent = totalAmount;

            // Split details by ';' and create list items
            const detailsArray = orderDetails.split(';');
            const modalOrderDetailsList = document.getElementById('modalOrderDetails');
            modalOrderDetailsList.innerHTML = ""; // Clear previous details

            detailsArray.forEach(detail => {
                if (detail.trim()) {
                    const listItem = document.createElement('li');
                    listItem.textContent = detail.trim(); // Trim whitespace
                    modalOrderDetailsList.appendChild(listItem);
                }
            });
        });

        // Script to handle modal population for order edit
        const orderEditModal = document.getElementById('orderEditModal');
        orderEditModal.addEventListener('show.bs.modal', event => {
            const button = event.relatedTarget; // Button that triggered the modal
            const orderId = button.getAttribute('data-order-id');
            const currentStatus = button.getAttribute('data-current-status');

            // Set the order ID in the form
            document.getElementById('editOrderId').value = orderId;

            // Set the selected status (default to current status)
            document.getElementById('editOrderStatus').value = currentStatus;
        });
    </script>
}
